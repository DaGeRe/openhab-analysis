private synchronized void doNodeInitialisation() {                                                     private synchronized void doNodeInitialisation() {                                                  
if (nodeInitialised) {                                                                                 if (nodeInitialised) {                                                                              
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
ZigBeeNode node = coordinatorHandler.getNode(nodeIeeeAddress);                                         ZigBeeNode node = coordinatorHandler.getNode(nodeIeeeAddress);                                      
if (node == null) {                                                                                    if (node == null) {                                                                                 
logger.debug("{}: Node not found - deferring handler initialisation", nodeIeeeAddress);                logger.debug("{}: Node not found - deferring handler initialisation", nodeIeeeAddress);             
updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, ZigBeeBindingConstants.OFFLINE_NODE_NOT_FO   updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, ZigBeeBindingConstants.OFFLINE_NODE_NOT_FO
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
// Check if discovery is complete and we know all the services the node supports                       // Check if discovery is complete and we know all the services the node supports                    
if (!node.isDiscovered()) {                                                                            if (!node.isDiscovered()) {                                                                         
logger.debug("{}: Node has not finished discovery", nodeIeeeAddress);                                  logger.debug("{}: Node has not finished discovery", nodeIeeeAddress);                               
updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, ZigBeeBindingConstants.OFFLINE_DISCOVERY_I   updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, ZigBeeBindingConstants.OFFLINE_DISCOVERY_I
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
logger.debug("{}: Start initialising ZigBee Thing handler", nodeIeeeAddress);                          logger.debug("{}: Start initialising ZigBee Thing handler", nodeIeeeAddress);                       
// Update the general properties                                                                       // Update the general properties                                                                    
ZigBeeNodePropertyDiscoverer propertyDiscoverer = new ZigBeeNodePropertyDiscoverer();                  ZigBeeNodePropertyDiscoverer propertyDiscoverer = new ZigBeeNodePropertyDiscoverer();               
propertyDiscoverer.setProperties(getThing().getProperties());                                          propertyDiscoverer.setProperties(getThing().getProperties());                                       
Map&lt;String, String&gt; newProperties = propertyDiscoverer.getProperties(node);                      Map&lt;String, String&gt; newProperties = propertyDiscoverer.getProperties(node);                   
updateProperties(newProperties);                                                                       updateProperties(newProperties);                                                                    
// Clear the channels in case we are reinitialising                                                    // Clear the channels in case we are reinitialising                                                 
channels.clear();                                                                                      channels.clear();                                                                                   
// Get the configuration handlers applicable for the thing                                             // Get the configuration handlers applicable for the thing                                          
ZclClusterConfigFactory configFactory = new ZclClusterConfigFactory();                                 ZclClusterConfigFactory configFactory = new ZclClusterConfigFactory();                              
for (ZigBeeEndpoint endpoint : coordinatorHandler.getNodeEndpoints(nodeIeeeAddress)) {                 for (ZigBeeEndpoint endpoint : coordinatorHandler.getNodeEndpoints(nodeIeeeAddress)) {              
List&lt;ZclClusterConfigHandler&gt; handlers = configFactory.getConfigHandlers(endpoint);              List&lt;ZclClusterConfigHandler&gt; handlers = configFactory.getConfigHandlers(endpoint);           
configHandlers.addAll(handlers);                                                                       configHandlers.addAll(handlers);                                                                    
}                                                                                                      }                                                                                                   
List&lt;Channel&gt; nodeChannels;                                                                      List&lt;Channel&gt; nodeChannels;                                                                   
List&lt;ConfigDescriptionParameter&gt; parameters = new ArrayList&lt;&gt;(ZigBeeConfigDescriptionPar   List&lt;ConfigDescriptionParameter&gt; parameters = new ArrayList&lt;&gt;(ZigBeeConfigDescriptionPar
if (getThing().getThingTypeUID().equals(ZigBeeBindingConstants.THING_TYPE_GENERIC_DEVICE)) {           if (getThing().getThingTypeUID().equals(ZigBeeBindingConstants.THING_TYPE_GENERIC_DEVICE)) {        
// Dynamically create the channels from the device                                                     // Dynamically create the channels from the device                                                  
// Process all the endpoints for this device and add all channels as derived from the supported clus   // Process all the endpoints for this device and add all channels as derived from the supported clus
nodeChannels = new ArrayList&lt;&gt;();                                                                nodeChannels = new ArrayList&lt;&gt;();                                                             
for (ZigBeeEndpoint endpoint : coordinatorHandler.getNodeEndpoints(nodeIeeeAddress)) {                 for (ZigBeeEndpoint endpoint : coordinatorHandler.getNodeEndpoints(nodeIeeeAddress)) {              
logger.debug("{}: Checking endpoint {} channels", nodeIeeeAddress, endpoint.getEndpointId());          logger.debug("{}: Checking endpoint {} channels", nodeIeeeAddress, endpoint.getEndpointId());       
nodeChannels.addAll(channelFactory.getChannels(getThing().getUID(), endpoint));                        nodeChannels.addAll(channelFactory.getChannels(getThing().getUID(), endpoint));                     
}                                                                                                      }                                                                                                   
logger.debug("{}: Dynamically created {} channels", nodeIeeeAddress, nodeChannels.size());             logger.debug("{}: Dynamically created {} channels", nodeIeeeAddress, nodeChannels.size());          
for (ZclClusterConfigHandler handler : configHandlers) {                                               for (ZclClusterConfigHandler handler : configHandlers) {                                            
parameters.addAll(handler.getConfiguration());                                                         parameters.addAll(handler.getConfiguration());                                                      
}                                                                                                      }                                                                                                   
} else {                                                                                               } else {                                                                                            
// We already have the correct thing type so just use the channels                                     // We already have the correct thing type so just use the channels                                  
nodeChannels = getThing().getChannels();                                                               nodeChannels = getThing().getChannels();                                                            
logger.debug("{}: Using static definition with existing {} channels", nodeIeeeAddress, nodeChannels.   logger.debug("{}: Using static definition with existing {} channels", nodeIeeeAddress, nodeChannels.
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
configDescription = ConfigDescriptionBuilder.create(new URI("thing:" + getThing().getUID())).withPar   configDescription = ConfigDescriptionBuilder.create(new URI("thing:" + getThing().getUID())).withPar
} catch (IllegalArgumentException | URISyntaxException e) {                                            } catch (IllegalArgumentException | URISyntaxException e) {                                         
logger.debug("Error creating URI for thing description:", e);                                          logger.debug("Error creating URI for thing description:", e);                                       
}                                                                                                      }                                                                                                   
// Add statically defined endpoints and clusters                                                       // Add statically defined endpoints and clusters                                                    
for (Channel channel : nodeChannels) {                                                                 for (Channel channel : nodeChannels) {                                                              
// Process the channel properties                                                                      // Process the channel properties                                                                   
Map&lt;String, String&gt; properties = channel.getProperties();                                        Map&lt;String, String&gt; properties = channel.getProperties();                                     
int endpointId = Integer.parseInt(properties.get(ZigBeeBindingConstants.CHANNEL_PROPERTY_ENDPOINT));   int endpointId = Integer.parseInt(properties.get(ZigBeeBindingConstants.CHANNEL_PROPERTY_ENDPOINT));
ZigBeeEndpoint endpoint = node.getEndpoint(endpointId);                                                ZigBeeEndpoint endpoint = node.getEndpoint(endpointId);                                             
if (endpoint == null) {                                                                                if (endpoint == null) {                                                                             
int profileId;                                                                                         int profileId;                                                                                      
if (properties.get(ZigBeeBindingConstants.CHANNEL_PROPERTY_PROFILEID) == null) {                       if (properties.get(ZigBeeBindingConstants.CHANNEL_PROPERTY_PROFILEID) == null) {                    
profileId = ZigBeeProfileType.ZIGBEE_HOME_AUTOMATION.getKey();                                         profileId = ZigBeeProfileType.ZIGBEE_HOME_AUTOMATION.getKey();                                      
} else {                                                                                               } else {                                                                                            
profileId = Integer.parseInt(properties.get(ZigBeeBindingConstants.CHANNEL_PROPERTY_PROFILEID));       profileId = Integer.parseInt(properties.get(ZigBeeBindingConstants.CHANNEL_PROPERTY_PROFILEID));    
}                                                                                                      }                                                                                                   
logger.debug("{}: Creating statically defined device endpoint {} with profile {}", nodeIeeeAddress,    logger.debug("{}: Creating statically defined device endpoint {} with profile {}", nodeIeeeAddress, 
endpoint = new ZigBeeEndpoint(node, endpointId);                                                       endpoint = new ZigBeeEndpoint(node, endpointId);                                                    
endpoint.setProfileId(profileId);                                                                      endpoint.setProfileId(profileId);                                                                   
node.addEndpoint(endpoint);                                                                            node.addEndpoint(endpoint);                                                                         
}                                                                                                      }                                                                                                   
List&lt;Integer&gt; staticClusters;                                                                    List&lt;Integer&gt; staticClusters;                                                                 
boolean modified = false;                                                                              boolean modified = false;                                                                           
staticClusters = processClusterList(endpoint.getInputClusterIds(), properties.get(ZigBeeBindingConst   staticClusters = processClusterList(endpoint.getInputClusterIds(), properties.get(ZigBeeBindingConst
if (!staticClusters.isEmpty()) {                                                                       if (!staticClusters.isEmpty()) {                                                                    
logger.debug("{}: Forcing endpoint {} input clusters {}", nodeIeeeAddress, endpointId, staticCluster   logger.debug("{}: Forcing endpoint {} input clusters {}", nodeIeeeAddress, endpointId, staticCluster
endpoint.setInputClusterIds(staticClusters);                                                           endpoint.setInputClusterIds(staticClusters);                                                        
modified = true;                                                                                       modified = true;                                                                                    
}                                                                                                      }                                                                                                   
staticClusters = processClusterList(endpoint.getOutputClusterIds(), properties.get(ZigBeeBindingCons   staticClusters = processClusterList(endpoint.getOutputClusterIds(), properties.get(ZigBeeBindingCons
if (!staticClusters.isEmpty()) {                                                                       if (!staticClusters.isEmpty()) {                                                                    
logger.debug("{}: Forcing endpoint {} output clusters {}", nodeIeeeAddress, endpointId, staticCluste   logger.debug("{}: Forcing endpoint {} output clusters {}", nodeIeeeAddress, endpointId, staticCluste
endpoint.setOutputClusterIds(staticClusters);                                                          endpoint.setOutputClusterIds(staticClusters);                                                       
modified = true;                                                                                       modified = true;                                                                                    
}                                                                                                      }                                                                                                   
if (modified) {                                                                                        if (modified) {                                                                                     
logger.debug("{}: Updating endpoint {}", nodeIeeeAddress, endpointId);                                 logger.debug("{}: Updating endpoint {}", nodeIeeeAddress, endpointId);                              
node.updateEndpoint(endpoint);                                                                         node.updateEndpoint(endpoint);                                                                      
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
try {                                                                                                  try {                                                                                               
pollingPeriod = POLLING_PERIOD_MAX;                                                                    pollingPeriod = POLLING_PERIOD_MAX;                                                                 
// Check if the channels we've discovered are the same                                                 // Check if the channels we've discovered are the same                                              
List&lt;ChannelUID&gt; oldChannelUidList = new ArrayList&lt;ChannelUID&gt;();                          List&lt;ChannelUID&gt; oldChannelUidList = new ArrayList&lt;ChannelUID&gt;();                       
for (Channel channel : getThing().getChannels()) {                                                     for (Channel channel : getThing().getChannels()) {                                                  
oldChannelUidList.add(channel.getUID());                                                               oldChannelUidList.add(channel.getUID());                                                            
}                                                                                                      }                                                                                                   
List&lt;ChannelUID&gt; newChannelUidList = new ArrayList&lt;ChannelUID&gt;();                          List&lt;ChannelUID&gt; newChannelUidList = new ArrayList&lt;ChannelUID&gt;();                       
for (Channel channel : nodeChannels) {                                                                 for (Channel channel : nodeChannels) {                                                              
newChannelUidList.add(channel.getUID());                                                               newChannelUidList.add(channel.getUID());                                                            
// Add the configuration from the existing channel into the new channel                                // Add the configuration from the existing channel into the new channel                             
Channel currentChannel = getThing().getChannel(channel.getUID());                                      Channel currentChannel = getThing().getChannel(channel.getUID());                                   
if (currentChannel != null) {                                                                          if (currentChannel != null) {                                                                       
channel.getConfiguration().setProperties(currentChannel.getConfiguration().getProperties());           channel.getConfiguration().setProperties(currentChannel.getConfiguration().getProperties());        
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (!newChannelUidList.equals(oldChannelUidList)) {                                                    if (!newChannelUidList.equals(oldChannelUidList)) {                                                 
logger.debug("{}: Updating thing definition as channels have changed from {} to {}", nodeIeeeAddress   logger.debug("{}: Updating thing definition as channels have changed from {} to {}", nodeIeeeAddress
ThingBuilder thingBuilder = editThing();                                                               ThingBuilder thingBuilder = editThing();                                                            
thingBuilder.withChannels(nodeChannels).withConfiguration(getConfig());                                thingBuilder.withChannels(nodeChannels).withConfiguration(getConfig());                             
updateThing(thingBuilder.build());                                                                     updateThing(thingBuilder.build());                                                                  
}                                                                                                      }                                                                                                   
boolean doInitializeDevice = !Boolean.parseBoolean(thing.getProperties().get(ZigBeeBindingConstants.   boolean doInitializeDevice = !Boolean.parseBoolean(thing.getProperties().get(ZigBeeBindingConstants.
if (doInitializeDevice) {                                                                              if (doInitializeDevice) {                                                                           
initializeDevice();                                                                                    initializeDevice();                                                                                 
} else {                                                                                               } else {                                                                                            
logger.debug("{}: Device initialization will be skipped as the device is already initialized", nodeI   logger.debug("{}: Device initialization will be skipped as the device is already initialized", nodeI
}                                                                                                      }                                                                                                   
// Create the channel map to simplify processing incoming events                                       // Create the channel map to simplify processing incoming events                                    
for (Channel channel : getThing().getChannels()) {                                                     for (Channel channel : getThing().getChannels()) {                                                  
ZigBeeBaseChannelConverter handler = createZigBeeChannelConverter(channel);                            ZigBeeBaseChannelConverter handler = createZigBeeChannelConverter(channel);                         
if (handler == null) {                                                                                 if (handler == null) {                                                                              
logger.debug("{}: No handler found for {}", nodeIeeeAddress, channel.getUID());                      | logger.debug("{}: No handler found for {} of type {}", nodeIeeeAddress, channel.getUID(), channel.ge
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
if (handler.initializeConverter(this) == false) {                                                      if (handler.initializeConverter(this) == false) {                                                   
logger.info("{}: Channel {} failed to initialise converter", nodeIeeeAddress, channel.getUID());       logger.info("{}: Channel {} failed to initialise converter", nodeIeeeAddress, channel.getUID());    
continue;                                                                                              continue;                                                                                           
}                                                                                                      }                                                                                                   
if (channel.getConfiguration().get(ZclReportingConfig.CONFIG_POLLING) == null) {                       if (channel.getConfiguration().get(ZclReportingConfig.CONFIG_POLLING) == null) {                    
channel.getConfiguration().put(ZclReportingConfig.CONFIG_POLLING, handler.getPollingPeriod());         channel.getConfiguration().put(ZclReportingConfig.CONFIG_POLLING, handler.getPollingPeriod());      
}                                                                                                      }                                                                                                   
handler.handleRefresh();                                                                               handler.handleRefresh();                                                                            
// TODO: Update the channel configuration from the device if method available                          // TODO: Update the channel configuration from the device if method available                       
handler.updateConfiguration(new Configuration(), channel.getConfiguration().getProperties());          handler.updateConfiguration(new Configuration(), channel.getConfiguration().getProperties());       
channels.put(channel.getUID(), handler);                                                               channels.put(channel.getUID(), handler);                                                            
if (handler.getPollingPeriod() &lt; pollingPeriod) {                                                   if (handler.getPollingPeriod() &lt; pollingPeriod) {                                                
pollingPeriod = handler.getPollingPeriod();                                                            pollingPeriod = handler.getPollingPeriod();                                                         
}                                                                                                      }                                                                                                   
// Provide the state descriptions if the channel provides them                                         // Provide the state descriptions if the channel provides them                                      
StateDescription stateDescription = handler.getStateDescription();                                     StateDescription stateDescription = handler.getStateDescription();                                  
if (stateDescription != null) {                                                                        if (stateDescription != null) {                                                                     
stateDescriptions.put(channel.getUID(), stateDescription);                                             stateDescriptions.put(channel.getUID(), stateDescription);                                          
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
} catch (Exception e) {                                                                                } catch (Exception e) {                                                                             
logger.error("{}: Exception creating channels ", nodeIeeeAddress, e);                                  logger.error("{}: Exception creating channels ", nodeIeeeAddress, e);                               
updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.HANDLER_INITIALIZING_ERROR);                       updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.HANDLER_INITIALIZING_ERROR);                    
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
logger.debug("{}: Channel initialisation complete", nodeIeeeAddress);                                  logger.debug("{}: Channel initialisation complete", nodeIeeeAddress);                               
if (channels.isEmpty()) {                                                                              if (channels.isEmpty()) {                                                                           
logger.warn("{}: No supported clusters found", nodeIeeeAddress);                                       logger.warn("{}: No supported clusters found", nodeIeeeAddress);                                    
updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.HANDLER_INITIALIZING_ERROR, "No supported cluste   updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.HANDLER_INITIALIZING_ERROR, "No supported cluste
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
// If this is an RFD then we reduce polling to the max to avoid wasting battery                        // If this is an RFD then we reduce polling to the max to avoid wasting battery                     
if (node.isReducedFunctionDevice()) {                                                                  if (node.isReducedFunctionDevice()) {                                                               
pollingPeriod = POLLING_PERIOD_DEFAULT;                                                                pollingPeriod = POLLING_PERIOD_DEFAULT;                                                             
logger.debug("{}: Thing is RFD, using long poll period of {}sec", nodeIeeeAddress, pollingPeriod);     logger.debug("{}: Thing is RFD, using long poll period of {}sec", nodeIeeeAddress, pollingPeriod);  
}                                                                                                      }                                                                                                   
int expectedUpdatePeriod = getExpectedUpdatePeriod(channels);                                          int expectedUpdatePeriod = getExpectedUpdatePeriod(channels);                                       
expectedUpdatePeriod = (expectedUpdatePeriod * POLLING_OR_REPORTING_FACTOR) + POLLING_OR_REPORTING_M   expectedUpdatePeriod = (expectedUpdatePeriod * POLLING_OR_REPORTING_FACTOR) + POLLING_OR_REPORTING_M
logger.debug("{}: Setting ONLINE/OFFLINE timeout interval to: {}", nodeIeeeAddress, expectedUpdatePe   logger.debug("{}: Setting ONLINE/OFFLINE timeout interval to: {}", nodeIeeeAddress, expectedUpdatePe
isAliveTracker.addHandler(this, expectedUpdatePeriod);                                                 isAliveTracker.addHandler(this, expectedUpdatePeriod);                                              
// Update the binding table.                                                                           // Update the binding table.                                                                        
// We're not doing anything with the information here, but we want it up to date so it's ready for u   // We're not doing anything with the information here, but we want it up to date so it's ready for u
try {                                                                                                  try {                                                                                               
if (node.updateBindingTable().get() != ZigBeeStatus.SUCCESS) {                                         if (node.updateBindingTable().get() != ZigBeeStatus.SUCCESS) {                                      
logger.debug("{}: Error getting binding table", nodeIeeeAddress);                                      logger.debug("{}: Error getting binding table", nodeIeeeAddress);                                   
}                                                                                                      }                                                                                                   
} catch (InterruptedException | ExecutionException e) {                                                } catch (InterruptedException | ExecutionException e) {                                             
logger.error("{}: Exception getting binding table ", nodeIeeeAddress, e);                              logger.error("{}: Exception getting binding table ", nodeIeeeAddress, e);                           
}                                                                                                      }                                                                                                   
// Listen for incoming OTA requests                                                                    // Listen for incoming OTA requests                                                                 
ZclOtaUpgradeServer otaServer = getOtaServer(node);                                                    ZclOtaUpgradeServer otaServer = getOtaServer(node);                                                 
if (otaServer != null) {                                                                               if (otaServer != null) {                                                                            
otaServer.addListener(this);                                                                           otaServer.addListener(this);                                                                        
}                                                                                                      }                                                                                                   
updateStatus(ThingStatus.ONLINE);                                                                      updateStatus(ThingStatus.ONLINE);                                                                   
startPolling();                                                                                        startPolling();                                                                                     
nodeInitialised = true;                                                                                nodeInitialised = true;                                                                             
logger.debug("{}: Done initialising ZigBee Thing handler", nodeIeeeAddress);                           logger.debug("{}: Done initialising ZigBee Thing handler", nodeIeeeAddress);                        
// Save the network state                                                                              // Save the network state                                                                           
coordinatorHandler.serializeNetwork(node.getIeeeAddress());                                            coordinatorHandler.serializeNetwork(node.getIeeeAddress());                                         
}                                                                                                      }                                                                                                   
