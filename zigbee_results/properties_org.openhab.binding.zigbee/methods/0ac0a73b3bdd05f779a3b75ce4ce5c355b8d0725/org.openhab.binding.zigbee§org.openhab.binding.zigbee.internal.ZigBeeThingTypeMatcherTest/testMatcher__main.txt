@Test
public void testMatcher() throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
    ZigBeeThingTypeMatcher matcher = new ZigBeeThingTypeMatcher();
    Map<String, Object> properties;
    properties = new HashMap<>();
    properties.put(Thing.PROPERTY_VENDOR, "Vendor1");
    properties.put(Thing.PROPERTY_MODEL_ID, "Model1");
    matcher.matchThingType(properties);
    assertEquals(new ThingTypeUID("zigbee:type1"), matcher.matchThingType(properties));
    properties = new HashMap<>();
    properties.put(Thing.PROPERTY_VENDOR, "Vendor1");
    properties.put(Thing.PROPERTY_MODEL_ID, "Model2");
    assertEquals(new ThingTypeUID("zigbee:type3"), matcher.matchThingType(properties));
    // No match as overlapping properties
    properties = new HashMap<>();
    properties.put(Thing.PROPERTY_VENDOR, "Vendor1");
    properties.put(Thing.PROPERTY_MODEL_ID, "Model2");
    properties.put(Thing.PROPERTY_FIRMWARE_VERSION, "Version4");
    assertEquals(null, matcher.matchThingType(properties));
    // No match as overlapping properties
    properties = new HashMap<>();
    properties.put(Thing.PROPERTY_VENDOR, "Vendor1");
    assertEquals(null, matcher.matchThingType(properties));
    // No match at all
    properties = new HashMap<>();
    properties.put(Thing.PROPERTY_VENDOR, "Vendor3");
    assertEquals(null, matcher.matchThingType(properties));
    // Match with invisible characters
    properties = new HashMap<>();
    properties.put(Thing.PROPERTY_VENDOR, "Vendor4");
    properties.put(Thing.PROPERTY_MODEL_ID, "Model3");
    assertEquals(new ThingTypeUID("zigbee:type5"), matcher.matchThingType(properties));
}