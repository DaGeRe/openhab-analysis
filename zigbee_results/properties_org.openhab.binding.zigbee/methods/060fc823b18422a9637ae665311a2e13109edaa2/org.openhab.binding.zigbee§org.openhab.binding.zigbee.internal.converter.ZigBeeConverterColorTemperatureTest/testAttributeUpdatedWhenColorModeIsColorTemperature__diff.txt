@Test
public void testAttributeUpdatedWhenColorModeIsColorTemperature() {
    ZigBeeEndpoint endpoint = Mockito.mock(ZigBeeEndpoint.class);
    ZigBeeCoordinatorHandler coordinatorHandler = Mockito.mock(ZigBeeCoordinatorHandler.class);
    Mockito.when(coordinatorHandler.getEndpoint(ArgumentMatchers.any(IeeeAddress.class), ArgumentMatchers.anyInt())).thenReturn(endpoint);
    ZigBeeConverterColorTemperature converter = getConverter();
    ArgumentCaptor<ChannelUID> channelCapture = ArgumentCaptor.forClass(ChannelUID.class);
    ArgumentCaptor<State> stateCapture = ArgumentCaptor.forClass(State.class);
    ZigBeeThingHandler thingHandler = Mockito.mock(ZigBeeThingHandler.class);
    Channel channel = ChannelBuilder.create(new ChannelUID("a:b:c:d"), "").build();
    converter.initialize(channel, coordinatorHandler, new IeeeAddress("1234567890ABCDEF"), 1);
    converter.initializeConverter(thingHandler);
    ZclAttribute colorModeAttribute = new ZclAttribute(new ZclColorControlCluster(endpoint), 8, "ColorMode", ZclDataType.ENUMERATION_8_BIT, false, false, false, false);
    ZclAttribute colorTemperatureAttribute = new ZclAttribute(new ZclColorControlCluster(endpoint), 7, "ColorTemperature", ZclDataType.UNSIGNED_16_BIT_INTEGER, false, false, false, false);
    // Update the color mode to COLOR_TEMPERATURE and ensure that the state is not set
    colorModeAttribute.updateValue(ColorModeEnum.COLOR_TEMPERATURE.getKey());
    converter.attributeUpdated(colorModeAttribute, colorModeAttribute.getLastValue());
    Mockito.verify(thingHandler, Mockito.times(0)).setChannelState(channelCapture.capture(), stateCapture.capture());
    // Set the color temperature and ensure that the channel is not set
    colorTemperatureAttribute.updateValue(Integer.valueOf(250));
    converter.attributeUpdated(colorTemperatureAttribute, colorTemperatureAttribute.getLastValue());
    Mockito.verify(thingHandler, Mockito.times(1)).setChannelState(channelCapture.capture(), stateCapture.capture());
    assertEquals(convertMiredToPercent(converter, 250), stateCapture.getValue());
}