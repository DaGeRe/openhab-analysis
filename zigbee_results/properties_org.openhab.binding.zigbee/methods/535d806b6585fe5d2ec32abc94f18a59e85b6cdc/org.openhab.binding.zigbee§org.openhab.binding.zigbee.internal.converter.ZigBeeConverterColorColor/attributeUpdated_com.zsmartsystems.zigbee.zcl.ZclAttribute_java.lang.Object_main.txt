@Override
public void attributeUpdated(ZclAttribute attribute, Object val) {
    logger.debug("{}: ZigBee attribute reports {}", endpoint.getIeeeAddress(), attribute);
    synchronized (colorUpdateSync) {
        try {
            switch(attribute.getClusterType().getId()) {
                case ZclOnOffCluster.CLUSTER_ID:
                    if (attribute.getId() == ZclOnOffCluster.ATTR_ONOFF) {
                        Boolean value = (Boolean) val;
                        OnOffType onoff = value ? OnOffType.ON : OnOffType.OFF;
                        updateOnOff(onoff);
                    }
                    break;
                case ZclLevelControlCluster.CLUSTER_ID:
                    if (attribute.getId() == ZclLevelControlCluster.ATTR_CURRENTLEVEL) {
                        PercentType brightness = levelToPercent((Integer) val);
                        updateBrightness(brightness);
                    }
                    break;
                case ZclColorControlCluster.CLUSTER_ID:
                    switch(attribute.getId()) {
                        case ZclColorControlCluster.ATTR_CURRENTHUE:
                            int hue = (Integer) val;
                            if (hue != lastHue) {
                                lastHue = hue;
                                hueChanged = true;
                            }
                            lastMired = -1;
                            break;
                        case ZclColorControlCluster.ATTR_CURRENTSATURATION:
                            int saturation = (Integer) val;
                            if (saturation != lastSaturation) {
                                lastSaturation = saturation;
                                saturationChanged = true;
                            }
                            lastMired = -1;
                            break;
                        case ZclColorControlCluster.ATTR_CURRENTX:
                            int x = (Integer) val;
                            if (x != lastX) {
                                lastX = x;
                                xChanged = true;
                            }
                            lastMired = -1;
                            break;
                        case ZclColorControlCluster.ATTR_CURRENTY:
                            int y = (Integer) val;
                            if (y != lastY) {
                                lastY = y;
                                yChanged = true;
                            }
                            lastMired = -1;
                            break;
                        case ZclColorControlCluster.ATTR_COLORTEMPERATURE:
                            if (val instanceof Integer mired && mired != lastMired) {
                                HSBType ctHSB = ColorUtil.xyToHsb(ColorUtil.kelvinToXY(1e6 / mired));
                                updateColorHSB(ctHSB.getHue(), ctHSB.getSaturation());
                                lastMired = mired;
                            }
                            break;
                        case ZclColorControlCluster.ATTR_COLORMODE:
                            Integer colorMode = (Integer) val;
                            ColorModeEnum colorModeEnum = ColorModeEnum.getByValue(colorMode);
                            if (colorModeEnum != ColorModeEnum.COLOR_TEMPERATURE) {
                                lastMired = -1;
                            }
                            break;
                    }
            }
            if (hueChanged || saturationChanged || xChanged || yChanged) {
                if (colorUpdateTimer != null) {
                    colorUpdateTimer.cancel(true);
                    colorUpdateTimer = null;
                }
                if (supportsHue && hueChanged && saturationChanged) {
                    updateColorHSB();
                } else if (!supportsHue && xChanged && yChanged) {
                    updateColorXY();
                } else {
                    // Wait some time and update anyway if only one attribute in each pair is updated
                    colorUpdateTimer = colorUpdateScheduler.schedule(new Runnable() {

                        @Override
                        public void run() {
                            synchronized (colorUpdateSync) {
                                try {
                                    if (supportsHue && (hueChanged || saturationChanged) && lastHue >= 0.0f && lastSaturation >= 0.0f) {
                                        updateColorHSB();
                                    } else if (!supportsHue && (xChanged || yChanged) && lastX >= 0.0f && lastY >= 0.0f) {
                                        updateColorXY();
                                    }
                                } catch (Exception e) {
                                    logger.debug("{}: Exception in deferred attribute update", endpoint.getIeeeAddress(), e);
                                }
                                colorUpdateTimer = null;
                            }
                        }
                    }, 500, TimeUnit.MILLISECONDS);
                }
            }
        } catch (Exception e) {
            logger.debug("{}: Exception in attribute update", endpoint.getIeeeAddress(), e);
        }
    }
}