@Override
public boolean initialize(ZclCluster cluster) {
    levelControlCluster = (ZclLevelControlCluster) cluster;
    try {
        Boolean result = levelControlCluster.discoverAttributes(false).get();
        if (!result) {
            logger.debug("{}: Unable to get supported attributes for {}.", levelControlCluster.getZigBeeAddress(), levelControlCluster.getClusterName());
        }
    } catch (InterruptedException | ExecutionException e) {
        logger.error("{}: Error getting supported attributes for {}. ", levelControlCluster.getZigBeeAddress(), levelControlCluster.getClusterName(), e);
    }
    // Build a list of configuration supported by this channel based on the attributes the cluster supports
    List<ParameterOption> options = new ArrayList<>();
    options.add(new ParameterOption("65535", "Use On/Off times"));
    parameters.add(ConfigDescriptionParameterBuilder.create(CONFIG_DEFAULTTRANSITIONTIME, Type.INTEGER).withLabel("Default Transition Time").withDescription("Default time in 100ms intervals to transition between ON and OFF").withDefault("0").withMinimum(new BigDecimal(0)).withMaximum(new BigDecimal(60000)).withOptions(options).withLimitToOptions(false).build());
    options = new ArrayList<ParameterOption>();
    parameters.add(ConfigDescriptionParameterBuilder.create(CONFIG_INVERTCONTROL, Type.BOOLEAN).withLabel("Invert Level Commands").withDescription("Invert all level control commands sent to the device").withDefault("false").build());
    parameters.add(ConfigDescriptionParameterBuilder.create(CONFIG_INVERTCONTROL, Type.BOOLEAN).withLabel("Invert Level Reports").withDescription("Invert all level control reports received from the device").withDefault("false").build());
    if (levelControlCluster.isAttributeSupported(ZclLevelControlCluster.ATTR_ONOFFTRANSITIONTIME)) {
        options = new ArrayList<ParameterOption>();
        parameters.add(ConfigDescriptionParameterBuilder.create(CONFIG_ONOFFTRANSITIONTIME, Type.INTEGER).withLabel("On/Off Transition Time").withDescription("Time in 100ms intervals to transition between ON and OFF").withDefault("0").withMinimum(new BigDecimal(0)).withMaximum(new BigDecimal(60000)).withOptions(options).withLimitToOptions(false).build());
    }
    if (levelControlCluster.isAttributeSupported(ZclLevelControlCluster.ATTR_ONTRANSITIONTIME)) {
        options = new ArrayList<ParameterOption>();
        options.add(new ParameterOption("65535", "Use On/Off transition time"));
        parameters.add(ConfigDescriptionParameterBuilder.create(CONFIG_ONTRANSITIONTIME, Type.INTEGER).withLabel("On Transition Time").withDescription("Time in 100ms intervals to transition from OFF to ON").withDefault("65535").withMinimum(new BigDecimal(0)).withMaximum(new BigDecimal(60000)).withOptions(options).withLimitToOptions(false).build());
    }
    if (levelControlCluster.isAttributeSupported(ZclLevelControlCluster.ATTR_OFFTRANSITIONTIME)) {
        options = new ArrayList<ParameterOption>();
        options.add(new ParameterOption("65535", "Use On/Off transition time"));
        parameters.add(ConfigDescriptionParameterBuilder.create(CONFIG_OFFTRANSITIONTIME, Type.INTEGER).withLabel("Off Transition Time").withDescription("Time in 100ms intervals to transition from ON to OFF").withDefault("65535").withMinimum(new BigDecimal(0)).withMaximum(new BigDecimal(60000)).withOptions(options).withLimitToOptions(false).build());
    }
    if (levelControlCluster.isAttributeSupported(ZclLevelControlCluster.ATTR_ONLEVEL)) {
        options = new ArrayList<ParameterOption>();
        options.add(new ParameterOption("255", "Not Set"));
        parameters.add(ConfigDescriptionParameterBuilder.create(CONFIG_ONLEVEL, Type.INTEGER).withLabel("On Level").withDescription("Default On level").withDefault("255").withMinimum(new BigDecimal(0)).withMaximum(new BigDecimal(60000)).withOptions(options).withLimitToOptions(false).build());
    }
    if (levelControlCluster.isAttributeSupported(ZclLevelControlCluster.ATTR_DEFAULTMOVERATE)) {
        options = new ArrayList<ParameterOption>();
        options.add(new ParameterOption("255", "Not Set"));
        parameters.add(ConfigDescriptionParameterBuilder.create(CONFIG_DEFAULTMOVERATE, Type.INTEGER).withLabel("Default move rate").withDescription("Move rate in steps per second").withDefault("255").withMinimum(new BigDecimal(0)).withMaximum(new BigDecimal(60000)).withOptions(options).withLimitToOptions(false).build());
    }
    return !parameters.isEmpty();
}