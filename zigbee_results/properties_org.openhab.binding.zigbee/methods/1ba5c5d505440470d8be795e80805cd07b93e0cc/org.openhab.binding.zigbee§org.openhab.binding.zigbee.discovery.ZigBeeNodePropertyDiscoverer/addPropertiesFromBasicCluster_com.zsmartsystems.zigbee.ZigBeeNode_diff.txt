private void addPropertiesFromBasicCluster(ZigBeeNode node) {                                          private void addPropertiesFromBasicCluster(ZigBeeNode node) {                                       
ZclBasicCluster basicCluster = (ZclBasicCluster) node.getEndpoints().stream().map(ep -&gt; ep.getInp | Optional&lt;ZclCluster&gt; cluster = node.getEndpoints().stream().map(ep -&gt; ep.getInputCluster(Zc
                                                                                                     | ZclBasicCluster basicCluster = (ZclBasicCluster) cluster.orElse(null);                              
if (basicCluster == null) {                                                                            if (basicCluster == null) {                                                                         
logger.debug("{}: Node doesn't support basic cluster", node.getIeeeAddress());                         logger.debug("{}: Node doesn't support basic cluster", node.getIeeeAddress());                      
return;                                                                                                return;                                                                                             
}                                                                                                      }                                                                                                   
logger.debug("{}: ZigBee node property discovery using basic cluster on endpoint {}", node.getIeeeAd   logger.debug("{}: ZigBee node property discovery using basic cluster on endpoint {}", node.getIeeeAd
// Attempt to read all properties with a single command.                                               // Attempt to read all properties with a single command.                                            
// If successful, this updates the cache with the property values.                                     // If successful, this updates the cache with the property values.                                  
try {                                                                                                  try {                                                                                               
Map&lt;String, Integer&gt; propertiesToRead = getPropertiesToRead(basicCluster);                       Map&lt;String, Integer&gt; propertiesToRead = getPropertiesToRead(basicCluster);                    
List&lt;Integer&gt; attributes = new ArrayList&lt;&gt;(propertiesToRead.values());                     List&lt;Integer&gt; attributes = new ArrayList&lt;&gt;(propertiesToRead.values());                  
if (!attributes.isEmpty()) {                                                                           if (!attributes.isEmpty()) {                                                                        
basicCluster.readAttributes(attributes).get();                                                         basicCluster.readAttributes(attributes).get();                                                      
}                                                                                                      }                                                                                                   
} catch (InterruptedException | ExecutionException e) {                                                } catch (InterruptedException | ExecutionException e) {                                             
logger.info("{}: There was an error when trying to read all properties with a single command.", node   logger.info("{}: There was an error when trying to read all properties with a single command.", node
}                                                                                                      }                                                                                                   
// Now, get each single property via the basic cluster. If the above multi-attribute read was succes   // Now, get each single property via the basic cluster. If the above multi-attribute read was succes
// this will get each property from the cache. Otherwise, it will try to get the property from the d   // this will get each property from the cache. Otherwise, it will try to get the property from the d
if (alwaysUpdate || properties.get(Thing.PROPERTY_VENDOR) == null) {                                   if (alwaysUpdate || properties.get(Thing.PROPERTY_VENDOR) == null) {                                
String manufacturer = basicCluster.getManufacturerName(Long.MAX_VALUE);                                String manufacturer = basicCluster.getManufacturerName(Long.MAX_VALUE);                             
if (manufacturer != null) {                                                                            if (manufacturer != null) {                                                                         
properties.put(Thing.PROPERTY_VENDOR, manufacturer.trim());                                            properties.put(Thing.PROPERTY_VENDOR, manufacturer.trim());                                         
} else {                                                                                               } else {                                                                                            
logger.debug("{}: Manufacturer request failed", node.getIeeeAddress());                                logger.debug("{}: Manufacturer request failed", node.getIeeeAddress());                             
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (alwaysUpdate || properties.get(Thing.PROPERTY_MODEL_ID) == null) {                                 if (alwaysUpdate || properties.get(Thing.PROPERTY_MODEL_ID) == null) {                              
String model = basicCluster.getModelIdentifier(Long.MAX_VALUE);                                        String model = basicCluster.getModelIdentifier(Long.MAX_VALUE);                                     
if (model != null) {                                                                                   if (model != null) {                                                                                
properties.put(Thing.PROPERTY_MODEL_ID, model.trim());                                                 properties.put(Thing.PROPERTY_MODEL_ID, model.trim());                                              
} else {                                                                                               } else {                                                                                            
logger.debug("{}: Model request failed", node.getIeeeAddress());                                       logger.debug("{}: Model request failed", node.getIeeeAddress());                                    
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (alwaysUpdate || properties.get(Thing.PROPERTY_HARDWARE_VERSION) == null) {                         if (alwaysUpdate || properties.get(Thing.PROPERTY_HARDWARE_VERSION) == null) {                      
Integer hwVersion = basicCluster.getHwVersion(Long.MAX_VALUE);                                         Integer hwVersion = basicCluster.getHwVersion(Long.MAX_VALUE);                                      
if (hwVersion != null) {                                                                               if (hwVersion != null) {                                                                            
properties.put(Thing.PROPERTY_HARDWARE_VERSION, hwVersion.toString());                                 properties.put(Thing.PROPERTY_HARDWARE_VERSION, hwVersion.toString());                              
} else {                                                                                               } else {                                                                                            
logger.debug("{}: Hardware version failed", node.getIeeeAddress());                                    logger.debug("{}: Hardware version failed", node.getIeeeAddress());                                 
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (alwaysUpdate || properties.get(ZigBeeBindingConstants.THING_PROPERTY_APPLICATIONVERSION) == null   if (alwaysUpdate || properties.get(ZigBeeBindingConstants.THING_PROPERTY_APPLICATIONVERSION) == null
Integer appVersion = basicCluster.getApplicationVersion(Long.MAX_VALUE);                               Integer appVersion = basicCluster.getApplicationVersion(Long.MAX_VALUE);                            
if (appVersion != null) {                                                                              if (appVersion != null) {                                                                           
properties.put(ZigBeeBindingConstants.THING_PROPERTY_APPLICATIONVERSION, appVersion.toString());       properties.put(ZigBeeBindingConstants.THING_PROPERTY_APPLICATIONVERSION, appVersion.toString());    
} else {                                                                                               } else {                                                                                            
logger.debug("{}: Application version failed", node.getIeeeAddress());                                 logger.debug("{}: Application version failed", node.getIeeeAddress());                              
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (alwaysUpdate || properties.get(ZigBeeBindingConstants.THING_PROPERTY_STKVERSION) == null) {        if (alwaysUpdate || properties.get(ZigBeeBindingConstants.THING_PROPERTY_STKVERSION) == null) {     
Integer stkVersion = basicCluster.getStackVersion(Long.MAX_VALUE);                                     Integer stkVersion = basicCluster.getStackVersion(Long.MAX_VALUE);                                  
if (stkVersion != null) {                                                                              if (stkVersion != null) {                                                                           
properties.put(ZigBeeBindingConstants.THING_PROPERTY_STKVERSION, stkVersion.toString());               properties.put(ZigBeeBindingConstants.THING_PROPERTY_STKVERSION, stkVersion.toString());            
} else {                                                                                               } else {                                                                                            
logger.debug("{}: Stack version failed", node.getIeeeAddress());                                       logger.debug("{}: Stack version failed", node.getIeeeAddress());                                    
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (alwaysUpdate || properties.get(ZigBeeBindingConstants.THING_PROPERTY_ZCLVERSION) == null) {        if (alwaysUpdate || properties.get(ZigBeeBindingConstants.THING_PROPERTY_ZCLVERSION) == null) {     
Integer zclVersion = basicCluster.getZclVersion(Long.MAX_VALUE);                                       Integer zclVersion = basicCluster.getZclVersion(Long.MAX_VALUE);                                    
if (zclVersion != null) {                                                                              if (zclVersion != null) {                                                                           
properties.put(ZigBeeBindingConstants.THING_PROPERTY_ZCLVERSION, zclVersion.toString());               properties.put(ZigBeeBindingConstants.THING_PROPERTY_ZCLVERSION, zclVersion.toString());            
} else {                                                                                               } else {                                                                                            
logger.debug("{}: ZCL version failed", node.getIeeeAddress());                                         logger.debug("{}: ZCL version failed", node.getIeeeAddress());                                      
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (alwaysUpdate || properties.get(ZigBeeBindingConstants.THING_PROPERTY_DATECODE) == null) {          if (alwaysUpdate || properties.get(ZigBeeBindingConstants.THING_PROPERTY_DATECODE) == null) {       
String dateCode = basicCluster.getDateCode(Long.MAX_VALUE);                                            String dateCode = basicCluster.getDateCode(Long.MAX_VALUE);                                         
if (dateCode != null) {                                                                                if (dateCode != null) {                                                                             
properties.put(ZigBeeBindingConstants.THING_PROPERTY_DATECODE, dateCode);                              properties.put(ZigBeeBindingConstants.THING_PROPERTY_DATECODE, dateCode);                           
} else {                                                                                               } else {                                                                                            
logger.debug("{}: Date code failed", node.getIeeeAddress());                                           logger.debug("{}: Date code failed", node.getIeeeAddress());                                        
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
