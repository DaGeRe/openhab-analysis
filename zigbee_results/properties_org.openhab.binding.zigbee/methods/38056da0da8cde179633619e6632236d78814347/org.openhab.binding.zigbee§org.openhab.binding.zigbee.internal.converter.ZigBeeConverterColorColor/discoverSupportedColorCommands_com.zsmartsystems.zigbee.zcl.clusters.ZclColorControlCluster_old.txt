private boolean discoverSupportedColorCommands(ZclColorControlCluster serverClusterColorControl) {
    // If the configuration is not set to AUTO, then we can override the control method
    if (configColorControl != null && configColorControl.getControlMethod() != ControlMethod.AUTO) {
        supportsHue = configColorControl.getControlMethod() == ControlMethod.HUE;
        return true;
    }
    // Discover whether the device supports HUE/SAT or XY color set of commands
    try {
        if (!serverClusterColorControl.discoverAttributes(false).get()) {
            logger.warn("{}: Cannot determine whether device supports RGB color. Assuming it supports HUE/SAT", endpoint.getIeeeAddress());
            supportsHue = true;
        } else if (serverClusterColorControl.getSupportedAttributes().contains(ZclColorControlCluster.ATTR_CURRENTHUE)) {
            logger.debug("{}: Device supports Hue/Saturation color set of commands", endpoint.getIeeeAddress());
            supportsHue = true;
        } else if (serverClusterColorControl.getSupportedAttributes().contains(ZclColorControlCluster.ATTR_CURRENTX)) {
            logger.debug("{}: Device supports XY color set of commands", endpoint.getIeeeAddress());
            supportsHue = false;
            // For now, only for XY lights till this is configurable
            delayedColorChange = true;
        } else {
            logger.warn("{}: Device supports neither RGB color nor XY color", endpoint.getIeeeAddress());
            pollingPeriod = POLLING_PERIOD_HIGH;
            return false;
        }
    } catch (InterruptedException | ExecutionException e) {
        logger.warn("{}: Exception checking whether device endpoint supports RGB color. Assuming it supports HUE/SAT", endpoint.getIeeeAddress(), e);
        supportsHue = true;
    }
    return true;
}