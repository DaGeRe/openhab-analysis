private void addPropertiesFromBasicCluster(ZigBeeNode node) {
    ZclBasicCluster basicCluster = (ZclBasicCluster) node.getEndpoints().stream().map(ep -> ep.getInputCluster(ZclBasicCluster.CLUSTER_ID)).filter(Objects::nonNull).findFirst().orElse(null);
    if (basicCluster == null) {
        logger.debug("{}: Node doesn't support basic cluster", node.getIeeeAddress());
        return;
    }
    logger.debug("{}: ZigBee node property discovery using basic cluster on endpoint {}", node.getIeeeAddress(), basicCluster.getZigBeeAddress());
    // Attempt to read all properties with a single command.
    // If successful, this updates the cache with the property values.
    try {
        Map<String, Integer> propertiesToRead = getPropertiesToRead(basicCluster);
        List<Integer> attributes = new ArrayList<>(propertiesToRead.values());
        if (!attributes.isEmpty()) {
            basicCluster.readAttributes(attributes).get();
        }
    } catch (InterruptedException | ExecutionException e) {
        logger.info("{}: There was an error when trying to read all properties with a single command.", node.getIeeeAddress(), e);
    }
    // Now, get each single property via the basic cluster. If the above multi-attribute read was successful,
    // this will get each property from the cache. Otherwise, it will try to get the property from the device again.
    if (alwaysUpdate || properties.get(Thing.PROPERTY_VENDOR) == null) {
        String manufacturer = basicCluster.getManufacturerName(Long.MAX_VALUE);
        if (manufacturer != null) {
            properties.put(Thing.PROPERTY_VENDOR, manufacturer.trim());
        } else {
            logger.debug("{}: Manufacturer request failed", node.getIeeeAddress());
        }
    }
    if (alwaysUpdate || properties.get(Thing.PROPERTY_MODEL_ID) == null) {
        String model = basicCluster.getModelIdentifier(Long.MAX_VALUE);
        if (model != null) {
            properties.put(Thing.PROPERTY_MODEL_ID, model.trim());
        } else {
            logger.debug("{}: Model request failed", node.getIeeeAddress());
        }
    }
    if (alwaysUpdate || properties.get(Thing.PROPERTY_HARDWARE_VERSION) == null) {
        Integer hwVersion = basicCluster.getHwVersion(Long.MAX_VALUE);
        if (hwVersion != null) {
            properties.put(Thing.PROPERTY_HARDWARE_VERSION, hwVersion.toString());
        } else {
            logger.debug("{}: Hardware version failed", node.getIeeeAddress());
        }
    }
    if (alwaysUpdate || properties.get(ZigBeeBindingConstants.THING_PROPERTY_APPLICATIONVERSION) == null) {
        Integer appVersion = basicCluster.getApplicationVersion(Long.MAX_VALUE);
        if (appVersion != null) {
            properties.put(ZigBeeBindingConstants.THING_PROPERTY_APPLICATIONVERSION, appVersion.toString());
        } else {
            logger.debug("{}: Application version failed", node.getIeeeAddress());
        }
    }
    if (alwaysUpdate || properties.get(ZigBeeBindingConstants.THING_PROPERTY_STKVERSION) == null) {
        Integer stkVersion = basicCluster.getStackVersion(Long.MAX_VALUE);
        if (stkVersion != null) {
            properties.put(ZigBeeBindingConstants.THING_PROPERTY_STKVERSION, stkVersion.toString());
        } else {
            logger.debug("{}: Stack version failed", node.getIeeeAddress());
        }
    }
    if (alwaysUpdate || properties.get(ZigBeeBindingConstants.THING_PROPERTY_ZCLVERSION) == null) {
        Integer zclVersion = basicCluster.getZclVersion(Long.MAX_VALUE);
        if (zclVersion != null) {
            properties.put(ZigBeeBindingConstants.THING_PROPERTY_ZCLVERSION, zclVersion.toString());
        } else {
            logger.debug("{}: ZCL version failed", node.getIeeeAddress());
        }
    }
    if (alwaysUpdate || properties.get(ZigBeeBindingConstants.THING_PROPERTY_DATECODE) == null) {
        String dateCode = basicCluster.getDateCode(Long.MAX_VALUE);
        if (dateCode != null) {
            properties.put(ZigBeeBindingConstants.THING_PROPERTY_DATECODE, dateCode);
        } else {
            logger.debug("{}: Date code failed", node.getIeeeAddress());
        }
    }
}