private void testInitializeDevice(String deviceInitializedProperty) throws NoSuchMethodException, Se   private void testInitializeDevice(String deviceInitializedProperty) throws NoSuchMethodException, Se
int endpointId = 1;                                                                                    int endpointId = 1;                                                                                 
IeeeAddress ieeeAddress = new IeeeAddress("000D6F000C1534C3");                                         IeeeAddress ieeeAddress = new IeeeAddress("000D6F000C1534C3");                                      
ThingType thingType = ThingTypeBuilder.instance(ZigBeeBindingConstants.BINDING_ID, ZigBeeBindingCons   ThingType thingType = ThingTypeBuilder.instance(ZigBeeBindingConstants.BINDING_ID, ZigBeeBindingCons
ThingUID thingUID = new ThingUID(thingType.getUID(), "thingUID");                                      ThingUID thingUID = new ThingUID(thingType.getUID(), "thingUID");                                   
ZigBeeNode zigBeeNode = mockZigBeeNode(endpointId, ieeeAddress);                                       ZigBeeNode zigBeeNode = mockZigBeeNode(endpointId, ieeeAddress);                                    
ZigBeeCoordinatorHandler zigBeeCoordinatorHandler = mockZigBeeCoordinatorHandler(zigBeeNode);          ZigBeeCoordinatorHandler zigBeeCoordinatorHandler = mockZigBeeCoordinatorHandler(zigBeeNode);       
// create the thing properties which can contain the device initialized property                       // create the thing properties which can contain the device initialized property                    
Map&lt;String, String&gt; thingProperties = new HashMap&lt;String, String&gt;();                       Map&lt;String, String&gt; thingProperties = new HashMap&lt;String, String&gt;();                    
if (deviceInitializedProperty != null && !deviceInitializedProperty.isBlank()) {                       if (deviceInitializedProperty != null && !deviceInitializedProperty.isBlank()) {                    
thingProperties.put(ZigBeeBindingConstants.THING_PROPERTY_DEVICE_INITIALIZED, deviceInitializedPrope   thingProperties.put(ZigBeeBindingConstants.THING_PROPERTY_DEVICE_INITIALIZED, deviceInitializedPrope
}                                                                                                      }                                                                                                   
Channel channel = mockChannel(endpointId, thingUID);                                                   Channel channel = mockChannel(endpointId, thingUID);                                                
Thing thing = mockThing(thingType, thingProperties, channel);                                          Thing thing = mockThing(thingType, thingProperties, channel);                                       
ZigBeeBaseChannelConverter zigBeeChannelConverter = mockZigBeeBaseChannelConverterSuccessfull();       ZigBeeBaseChannelConverter zigBeeChannelConverter = mockZigBeeBaseChannelConverterSuccessfull();    
ZigBeeChannelConverterFactory zigBeeChannelConverterFactory = mockZigBeeChannelConverterFactory(zigB   ZigBeeChannelConverterFactory zigBeeChannelConverterFactory = mockZigBeeChannelConverterFactory(zigB
ZigBeeIsAliveTracker zigBeeIsAliveTracker = mock(ZigBeeIsAliveTracker.class);                          ZigBeeIsAliveTracker zigBeeIsAliveTracker = mock(ZigBeeIsAliveTracker.class);                       
ZigBeeThingHandler zigBeeThingHandler = new ZigBeeThingHandler(thing, zigBeeChannelConverterFactory,   ZigBeeThingHandler zigBeeThingHandler = new ZigBeeThingHandler(thing, zigBeeChannelConverterFactory,
injectIntoPrivateField(zigBeeThingHandler, zigBeeCoordinatorHandler, "coordinatorHandler");            injectIntoPrivateField(zigBeeThingHandler, zigBeeCoordinatorHandler, "coordinatorHandler");         
injectIntoPrivateField(zigBeeThingHandler, ieeeAddress, "nodeIeeeAddress");                            injectIntoPrivateField(zigBeeThingHandler, ieeeAddress, "nodeIeeeAddress");                         
                                                                                                     | ThingHandlerCallback callback = mock(ThingHandlerCallback.class);                                   
                                                                                                     | zigBeeThingHandler.setCallback(callback);                                                           
// call doNodeInitialisation by reflection as it is not accessible                                     // call doNodeInitialisation by reflection as it is not accessible                                  
Method doNodeInitialisationMethod = ZigBeeThingHandler.class.getDeclaredMethod("doNodeInitialisation   Method doNodeInitialisationMethod = ZigBeeThingHandler.class.getDeclaredMethod("doNodeInitialisation
doNodeInitialisationMethod.setAccessible(true);                                                        doNodeInitialisationMethod.setAccessible(true);                                                     
doNodeInitialisationMethod.invoke(zigBeeThingHandler, (Object[]) null);                                doNodeInitialisationMethod.invoke(zigBeeThingHandler, (Object[]) null);                             
// When the device was already initialized the initialization will be skipped and the thing property   // When the device was already initialized the initialization will be skipped and the thing property
// be updated                                                                                          // be updated                                                                                       
if (Boolean.TRUE.toString().equals(deviceInitializedProperty)) {                                       if (Boolean.TRUE.toString().equals(deviceInitializedProperty)) {                                    
Mockito.verify(zigBeeChannelConverter, never()).initializeDevice();                                    Mockito.verify(zigBeeChannelConverter, never()).initializeDevice();                                 
Mockito.verify(thing, never()).setProperty(ZigBeeBindingConstants.THING_PROPERTY_DEVICE_INITIALIZED,   Mockito.verify(thing, never()).setProperty(ZigBeeBindingConstants.THING_PROPERTY_DEVICE_INITIALIZED,
} else {                                                                                               } else {                                                                                            
Mockito.verify(zigBeeChannelConverter, times(1)).initializeDevice();                                   Mockito.verify(zigBeeChannelConverter, times(1)).initializeDevice();                                
Mockito.verify(thing, times(1)).setProperty(ZigBeeBindingConstants.THING_PROPERTY_DEVICE_INITIALIZED   Mockito.verify(thing, times(1)).setProperty(ZigBeeBindingConstants.THING_PROPERTY_DEVICE_INITIALIZED
}                                                                                                      }                                                                                                   
                                                                                                     | ArgumentCaptor&lt;ThingStatusInfo&gt; captor = ArgumentCaptor.forClass(ThingStatusInfo.class);      
                                                                                                     | verify(callback, times(1)).statusUpdated(any(), captor.capture());                                  
                                                                                                     | ThingStatusInfo status = captor.getValue();                                                         
                                                                                                     | assertEquals(ThingStatus.ONLINE, status.getStatus());                                               
}                                                                                                      }                                                                                                   
