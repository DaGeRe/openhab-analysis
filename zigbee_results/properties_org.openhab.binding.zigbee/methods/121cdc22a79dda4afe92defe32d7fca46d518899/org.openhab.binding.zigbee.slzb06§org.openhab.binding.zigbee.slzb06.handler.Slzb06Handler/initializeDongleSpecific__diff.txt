@Override                                                                                              @Override                                                                                           
protected void initializeDongleSpecific() {                                                            protected void initializeDongleSpecific() {                                                         
Slzb06Configuration config = getConfigAs(Slzb06Configuration.class);                                   Slzb06Configuration config = getConfigAs(Slzb06Configuration.class);                                
setGroupRegistration(config.zigbee_groupregistration);                                                 setGroupRegistration(config.zigbee_groupregistration);                                              
if (pollingJob == null) {                                                                              if (pollingJob == null) {                                                                           
Runnable pollingRunnable = new Runnable() {                                                            Runnable pollingRunnable = new Runnable() {                                                         
                                                                                                                                                                                                           
@Override                                                                                              @Override                                                                                           
public void run() {                                                                                    public void run() {                                                                                 
if (zigbeeTransport != null) {                                                                         if (zigbeeTransport != null) {                                                                      
ZigBeeDongleEzsp dongle = (ZigBeeDongleEzsp) zigbeeTransport;                                          ZigBeeDongleEzsp dongle = (ZigBeeDongleEzsp) zigbeeTransport;                                       
Map&lt;String, Long&gt; counters = dongle.getCounters();                                               Map&lt;String, Long&gt; counters = dongle.getCounters();                                            
if (!counters.isEmpty()) {                                                                             if (!counters.isEmpty()) {                                                                          
if (isLinked(Slzb06BindingConstants.CHANNEL_RX_DAT)) {                                                 if (isLinked(Slzb06BindingConstants.CHANNEL_RX_DAT)) {                                              
updateState(Slzb06BindingConstants.CHANNEL_RX_DAT, new DecimalType(counters.get(ASH_RX_DAT)));         updateState(Slzb06BindingConstants.CHANNEL_RX_DAT, new DecimalType(counters.get(ASH_RX_DAT)));      
}                                                                                                      }                                                                                                   
if (isLinked(Slzb06BindingConstants.CHANNEL_TX_DAT)) {                                                 if (isLinked(Slzb06BindingConstants.CHANNEL_TX_DAT)) {                                              
updateState(Slzb06BindingConstants.CHANNEL_TX_DAT, new DecimalType(counters.get(ASH_TX_DAT)));         updateState(Slzb06BindingConstants.CHANNEL_TX_DAT, new DecimalType(counters.get(ASH_TX_DAT)));      
}                                                                                                      }                                                                                                   
if (isLinked(Slzb06BindingConstants.CHANNEL_RX_ACK)) {                                                 if (isLinked(Slzb06BindingConstants.CHANNEL_RX_ACK)) {                                              
updateState(Slzb06BindingConstants.CHANNEL_RX_ACK, new DecimalType(counters.get(ASH_RX_ACK)));         updateState(Slzb06BindingConstants.CHANNEL_RX_ACK, new DecimalType(counters.get(ASH_RX_ACK)));      
}                                                                                                      }                                                                                                   
if (isLinked(Slzb06BindingConstants.CHANNEL_TX_ACK)) {                                                 if (isLinked(Slzb06BindingConstants.CHANNEL_TX_ACK)) {                                              
updateState(Slzb06BindingConstants.CHANNEL_TX_ACK, new DecimalType(counters.get(ASH_TX_ACK)));         updateState(Slzb06BindingConstants.CHANNEL_TX_ACK, new DecimalType(counters.get(ASH_TX_ACK)));      
}                                                                                                      }                                                                                                   
if (isLinked(Slzb06BindingConstants.CHANNEL_RX_NAK)) {                                                 if (isLinked(Slzb06BindingConstants.CHANNEL_RX_NAK)) {                                              
updateState(Slzb06BindingConstants.CHANNEL_RX_NAK, new DecimalType(counters.get(ASH_RX_NAK)));         updateState(Slzb06BindingConstants.CHANNEL_RX_NAK, new DecimalType(counters.get(ASH_RX_NAK)));      
}                                                                                                      }                                                                                                   
if (isLinked(Slzb06BindingConstants.CHANNEL_TX_NAK)) {                                                 if (isLinked(Slzb06BindingConstants.CHANNEL_TX_NAK)) {                                              
updateState(Slzb06BindingConstants.CHANNEL_TX_NAK, new DecimalType(counters.get(ASH_TX_NAK)));         updateState(Slzb06BindingConstants.CHANNEL_TX_NAK, new DecimalType(counters.get(ASH_TX_NAK)));      
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (communicator == null) {                                                                            if (communicator == null) {                                                                         
try {                                                                                                  try {                                                                                               
communicator = new Slzb06Communicator(config.slzb06_server);                                           communicator = new Slzb06Communicator(config.slzb06_server);                                        
} catch (Slzb06Exception e) {                                                                          } catch (Slzb06Exception e) {                                                                       
communicator = null;                                                                                   communicator = null;                                                                                
logger.error("SLZB06 API failed to initialise - internal channels will be unavailable: {}", e.getMes   logger.error("SLZB06 API failed to initialise - internal channels will be unavailable: {}", e.getMes
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
if (communicator != null) {                                                                            if (communicator != null) {                                                                         
try {                                                                                                  try {                                                                                               
Slzb06Sensors sensors = communicator.getSensors();                                                     Slzb06Sensors sensors = communicator.getSensors();                                                  
if (isLinked(Slzb06BindingConstants.CHANNEL_ESP32TEMP)) {                                            | if (isLinked(Slzb06BindingConstants.CHANNEL_ESP32TEMP) && sensors.esp32_temp != null) {             
updateState(Slzb06BindingConstants.CHANNEL_ESP32TEMP, new DecimalType(sensors.esp32_temp));            updateState(Slzb06BindingConstants.CHANNEL_ESP32TEMP, new DecimalType(sensors.esp32_temp));         
}                                                                                                      }                                                                                                   
if (isLinked(Slzb06BindingConstants.CHANNEL_ZBTEMP)) {                                               | if (isLinked(Slzb06BindingConstants.CHANNEL_ZBTEMP) && sensors.zb_temp != null) {                   
updateState(Slzb06BindingConstants.CHANNEL_ZBTEMP, new DecimalType(sensors.zb_temp));                  updateState(Slzb06BindingConstants.CHANNEL_ZBTEMP, new DecimalType(sensors.zb_temp));               
}                                                                                                      }                                                                                                   
if (isLinked(Slzb06BindingConstants.CHANNEL_UPTIME)) {                                               | if (isLinked(Slzb06BindingConstants.CHANNEL_UPTIME) && sensors.uptime != null) {                    
updateState(Slzb06BindingConstants.CHANNEL_UPTIME, new DecimalType(sensors.uptime));                   updateState(Slzb06BindingConstants.CHANNEL_UPTIME, new DecimalType(sensors.uptime));                
}                                                                                                      }                                                                                                   
if (isLinked(Slzb06BindingConstants.CHANNEL_SOCKETUPTIME)) {                                         | if (isLinked(Slzb06BindingConstants.CHANNEL_SOCKETUPTIME) && sensors.socket_uptime != null) {       
updateState(Slzb06BindingConstants.CHANNEL_SOCKETUPTIME, new DecimalType(sensors.socket_uptime));    | updateState(Slzb06BindingConstants.CHANNEL_SOCKETUPTIME, new DecimalType(sensors.socket_uptime / 100
}                                                                                                      }                                                                                                   
} catch (Exception e) {                                                                                } catch (Exception e) {                                                                             
logger.error("SLZB06: retreiving API information: {}", e.getMessage());                                logger.error("SLZB06: retreiving API information: {}", e.getMessage());                             
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
};                                                                                                     };                                                                                                  
pollingJob = scheduler.scheduleWithFixedDelay(pollingRunnable, 30, 30, TimeUnit.SECONDS);              pollingJob = scheduler.scheduleWithFixedDelay(pollingRunnable, 30, 30, TimeUnit.SECONDS);           
}                                                                                                      }                                                                                                   
}                                                                                                      }                                                                                                   
